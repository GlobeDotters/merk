#
# ███╗   ███╗██████╗ ██████╗ ██╗  ██╗
# ████╗ ████║╚═══╗██╗██╔══██╗██║ ██╔╝
# ██╔████╔██║███████║██████╔╝█████╔╝
# ██║╚██╔╝██║██╔══██║██╔══██╗██╔═██╗
# ██║ ╚═╝ ██║ █████╔╝██║  ██║██║  ██╗
# ╚═╝     ╚═╝ ╚════╝ ╚═╝  ╚═╝╚═╝  ╚═╝
# Copyright (C) 2021  Daniel Hetrick
# https://github.com/nutjob-laboratories/merk
# https://github.com/nutjob-laboratories
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

import sys
import os
import re
from collections import defaultdict
from pathlib import Path

from .resources import *

INSTALL_DIRECTORY = sys.path[0]
MERK_MODULE_DIRECTORY = os.path.join(INSTALL_DIRECTORY, "merk")
DATA_DIRECTORY = os.path.join(MERK_MODULE_DIRECTORY, "data")

CONFIG_DIRECTORY = None
STYLE_DIRECTORY = None
STYLE_FILE = None

def loadStyle(client,channel):

	if client.hostname:
		hostname = client.hostname
	else:
		hostname = client.server+":"+str(client.port)

	fname = hostname+"_"+channel+".style"

	target = os.path.join(fname, "default.style")

	if os.path.isfile(target):
		return read_style_file(target)
	else:
		return read_style_file(STYLE_FILE)

def initialize(directory,directory_name):
	global CONFIG_DIRECTORY
	global STYLE_DIRECTORY
	global STYLE_FILE

	# If the passed directory is set to None,
	# set the storage directory to the user's
	# home directory
	if directory==None:
		directory = str(Path.home())

	# The config directory should already be created
	CONFIG_DIRECTORY = os.path.join(directory,directory_name)

	STYLE_DIRECTORY = os.path.join(CONFIG_DIRECTORY,"styles")
	if not os.path.isdir(STYLE_DIRECTORY): os.mkdir(STYLE_DIRECTORY)

	STYLE_FILE = os.path.join(STYLE_DIRECTORY, "default.style")

	# Check to see if the default file exists
	if not os.path.isfile(STYLE_FILE):
		# The file doesn't exist, so create it
		backup = os.path.join(DATA_DIRECTORY, "default.style")
		style = read_style_file(backup)
		write_style_file(style,STYLE_FILE)

def read_style_file(filename):

	# Read in the file
	f=open(filename, "r",encoding="utf-8",errors="ignore")
	text = f.read()
	f.close()

	# Strip comments
	text = re.sub(re.compile("/\*.*?\*/",re.DOTALL ) ,"" ,text)

	# Tokenize the file
	buff = ''
	name = ''
	tokens = []
	inblock = False
	for char in text:
		if char=='{':
			if inblock:
				raise SyntaxError("Nested styles are forbidden")
			inblock = True
			name = buff.strip()
			buff = ''
			continue

		if char=='}':
			inblock = False
			section = [ name,buff.strip() ]
			tokens.append(section)
			buff = ''
			continue

		buff = buff + char

	# Check for an unclosed brace
	if inblock:
		raise SyntaxError("Unclosed brace")

	# Build output dict of lists
	style = defaultdict(list)
	for section in tokens:
		name = section[0]
		entry = []
		for l in section[1].split(";"):
			l = l.strip()
			if len(l)>0:
				entry.append(l)

		if name in style:
			raise SyntaxError("Styles can only be defined once")
		else:
			if len(entry)!=0:
				comp = "; ".join(entry) + ";"
				style[name] = comp
			else:
				style[name] = ''

	# Return the dict
	return style

def write_style_file(style,filename):
	output = f'''/*

\t███╗   ███╗██████╗ ██████╗ ██╗  ██╗
\t████╗ ████║╚═══╗██╗██╔══██╗██║ ██╔╝
\t██╔████╔██║███████║██████╔╝█████╔╝
\t██║╚██╔╝██║██╔══██║██╔══██╗██╔═██╗
\t██║ ╚═╝ ██║ █████╔╝██║  ██║██║  ██╗
\t╚═╝     ╚═╝ ╚════╝ ╚═╝  ╚═╝╚═╝  ╚═╝
\t███████╗████████╗██╗   ██╗██╗     ███████╗
\t██╔════╝╚══██╔══╝╚██╗ ██╔╝██║     ██╔════╝
\t███████╗   ██║    ╚████╔╝ ██║     █████╗
\t╚════██║   ██║     ╚██╔╝  ██║     ██╔══╝ 
\t███████║   ██║      ██║   ███████╗███████╗
\t╚══════╝   ╚═╝      ╚═╝   ╚══════╝╚══════╝
\t███████╗██╗██╗     ███████╗
\t██╔════╝██║██║     ██╔════╝
\t█████╗  ██║██║     █████╗  
\t██╔══╝  ██║██║     ██╔══╝  
\t██║     ██║███████╗███████╗
\t╚═╝     ╚═╝╚══════╝╚══════╝

\tGenerated by {APPLICATION_NAME} {APPLICATION_VERSION}

\tThis file is generated and maintained by the {APPLICATION_NAME} IRC Client

\t╔═════════════════════════════╗
\t║ Please don't edit manually! ║
\t╚═════════════════════════════╝

*/\n\n'''

	for key in style:
		output = output + key + " {\n"
		for s in style[key].split(';'):
			s = s.strip()
			if len(s)==0: continue
			output = output + "\t" + s + ";\n"
		output = output + "}\n\n"

	f=open(filename, "w",encoding="utf-8",errors="ignore")
	f.write(output)
	f.close()
